#!/usr/bin/env node

var optimist = require('optimist')
    .usage('Usage: $0 --pid=[num] --period=[num]')
    .demand('pid')
    .demand('period').default('period', 5000)
    .describe('pid', 'the pid of the process tree to monitor')
    .describe('period', 'number of seconds to wait before each probing');
var argv = optimist.argv;

// show usage if --help option is used
if (argv.help) {
  optimist.showHelp();
  process.exit(0);
}

var MonitorPid = require('../index.js');
var mp = new MonitorPid(argv.pid, { period: argv.period });

// received each time the pid tree has been monitored
mp.on('monitored', function (pid, data) {
  
  // remove spam fields...
  delete data.active_pids;
  delete data.pids;

  Object.keys(data).forEach(function (field, index) {
    if (field == 'cpu' || field == 'mem_vsz' || field == 'mem_rss') {
      data[field] = data[field].toFixed(2).toString().replace('.', ',');
    } else {
      data[field] = data[field].toString().replace('.', ',');
    }
  });
  writeCSV(data);
});

// occurs when the monitoring is finished
// (no more pid or stop has been called)
mp.on('end', function (pid) {
  process.exit(0);
});


mp.on('error', function (err) {
  console.error(err);
  process.exit(1);
});

// start the monitoring
mp.start();


/**
 * JSON2CSV tools
 */
var firstLine = true;
var fields    = [];
function writeCSV(row) {
  if (firstLine) {
    firstLine = false;
    fields = Object.keys(row);
    fields.forEach(function (field, idx) {
      process.stdout.write(field + (idx < fields.length - 1 ? ',' : ''));
    });
    process.stdout.write('\n');
  }
  fields.forEach(function (field, idx) {
    if (/,/.test(row[field])) {
      process.stdout.write('"' + row[field].replace('"', '""') + '"');
    } else {
      process.stdout.write(row[field]);
    }
    process.stdout.write(idx < fields.length - 1 ? ',' : '');
  });
  process.stdout.write('\n');
}
